using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace ProjectEuler
{
    public class ProblemSolver
    {
        public ProblemSolver()
        {
            // ## BEGIN OF HACK ##
            // "Waste" here the time with the reflection overload happening
            // in the 1st time we call the invoker, so that we do not affect
            // the measured time of the 1st problem with extra milliseconds.
            InvokeSolverMethod(1);
            // ## END OF HACK ##
        }

        /// <summary>
        /// Get the number or problems solved so far.
        /// </summary>
        /// <returns>The number of methods with "SolveProblem" in the name.</returns>
        public int GetNumberOfProblemsSolved()
        {
            return this
                .GetType()
                .GetMethods()
                .Where(m => m.Name.Contains("SolveProblem"))
                .Count();
        }

        /// <summary>
        /// Solve a problem, calculating the time it takes to execute.
        /// </summary>
        /// <param name="problem">A given problem number to solve.</param>
        /// <returns>The solution to the problem, including execution metrics.</returns>
        public SolutionInfo Solve(int problem)
        {
            SolutionInfo solution = new SolutionInfo(problem);

            var watch = new System.Diagnostics.Stopwatch();
            watch.Start();
            solution.ProblemSolution = InvokeSolverMethod(problem);
            watch.Stop();

            solution.ExecutionTimeInMs = watch.ElapsedMilliseconds;

            return solution;
        }

        /// <summary>
        /// Runs the problem solver's method given a problem number.
        /// Expects that there is a method with name "SolveProblemXXXX",
        /// where XXXX is the problem number left padded with zeros.
        /// </summary>
        /// <param name="problemNumber">A given problem number.</param>
        /// <returns>The solution of the problem.</returns>
        private int InvokeSolverMethod(int problemNumber)
        {
            MethodInfo solverMethod = this
                .GetType()
                .GetMethod($"SolveProblem{problemNumber.ToString().PadLeft(4, '0')}");

            return (int)solverMethod.Invoke(this, null);
        }

        /// <summary>
        /// -------------------------------------------------------------------
        /// Problem 1
        /// Multiples of 3 or 5
        /// -------------------------------------------------------------------
        /// If we list all the natural numbers below 10 that are multiples of
        /// 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        /// Find the sum of all the multiples of 3 or 5 below 1000.
        /// -------------------------------------------------------------------
        /// </summary>
        /// <returns>Solution for Project Euler #1</returns>
        public int SolveProblem0001()
        {
            int sum = 0;
            for (int i = 1; i < 1000; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                {
                    sum += i;
                }
            }
            return sum;
        }

        /// <summary>
        /// -------------------------------------------------------------------
        /// Problem 2
        /// Even Fibonacci numbers
        /// -------------------------------------------------------------------
        /// Each new term in the Fibonacci sequence is generated by adding the
        /// previous two terms. By starting with 1 and 2, the first 10 terms
        /// will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        /// By considering the terms in the Fibonacci sequence whose values do
        /// not exceed four million, find the sum of the even-valued terms.
        /// -------------------------------------------------------------------
        /// </summary>
        /// <returns>Solution for Project Euler #2</returns>
        public int SolveProblem0002()
        {
            int sum = 0;
            int previousValue1 = 0;
            int previousValue2 = 1;
            int currentValue = previousValue1 + previousValue2;

            while (currentValue < 4000000)
            {
                if (currentValue % 2 == 0)
                {
                    sum += currentValue;
                }

                previousValue1 = previousValue2;
                previousValue2 = currentValue;
                currentValue = previousValue1 + previousValue2;
            }

            return sum;
        }
    }
}